name: Snapshot Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Snapshot tag name (e.g., mvp, beta, pr-123)'
        required: true
        default: 'snapshot'
  issue_comment:
    types: [created]

concurrency:
  group: snapshot-${{ github.event.pull_request.number || github.event.issue.number || github.ref }}-${{ github.event.inputs.tag || 'pr' }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  check-ci:
    name: Check CI Status
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       startsWith(github.event.comment.body, '/snapshot'))
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.get-sha.outputs.sha }}
      artifact-name: ${{ steps.get-sha.outputs.artifact-name }}
      run-id: ${{ steps.find-ci.outputs.run-id }}
    steps:
      - name: Get commit SHA
        id: get-sha
        uses: actions/github-script@v7
        with:
          script: |
            let sha;
            if (context.eventName === 'issue_comment') {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });
              sha = pr.head.sha;
            } else {
              sha = context.sha;
            }
            core.setOutput('sha', sha);
            core.setOutput('artifact-name', `build-artifacts-${sha}`);
            console.log(`Commit SHA: ${sha}`);
            return sha;

      - name: Find CI workflow run
        id: find-ci
        uses: actions/github-script@v7
        with:
          script: |
            const sha = '${{ steps.get-sha.outputs.sha }}';

            // Find completed CI workflow runs for this SHA
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              status: 'completed',
              head_sha: sha,
              per_page: 10
            });

            const ciRun = runs.workflow_runs.find(run =>
              run.name === 'Typescript CI' && run.conclusion === 'success'
            );

            if (!ciRun) {
              const message = '‚ö†Ô∏è CI has not passed yet. Please wait for the build to complete and try again.';
              core.setFailed(message);

              if (context.eventName === 'issue_comment') {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: message
                });
              }
              return;
            }

            core.setOutput('run-id', ciRun.id);
            console.log(`‚úÖ Found successful CI run: ${ciRun.id}`);

  snapshot:
    name: Publish Snapshot
    needs: [check-ci]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: npm-publish
      url: https://npmjs.com/package/@dr_nikson/effect-grpc
    steps:
      - name: Determine snapshot tag
        id: tag
        uses: actions/github-script@v7
        with:
          script: |
            let tag = 'snapshot';
            let prNumber = null;

            if (context.eventName === 'issue_comment') {
              // Extract custom tag from comment if provided
              const comment = context.payload.comment.body.trim();
              const match = comment.match(/^\/snapshot(?:\s+(\S+))?/);
              const customTag = match && match[1];

              // Get PR details
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });

              prNumber = pr.number;
              tag = customTag || `pr-${prNumber}`;

              core.setOutput('pr-number', prNumber);
            } else {
              // workflow_dispatch
              tag = context.payload.inputs.tag;
            }

            core.setOutput('tag', tag);
            console.log(`Snapshot tag: ${tag}`);
            return tag;

      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          ref: ${{ needs.check-ci.outputs.sha }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v5.0.0
        with:
          node-version: '24.x'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.check-ci.outputs.artifact-name }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ needs.check-ci.outputs.run-id }}

      - name: Verify build artifacts
        run: |
          echo "Checking build artifacts..."
          ls -la packages/*/dist || (echo "‚ùå dist folders not found" && exit 1)
          ls -la packages/*/bin || echo "‚ö†Ô∏è  bin folders not found (may not exist)"
          echo "‚úÖ Build artifacts restored successfully"

      - name: Version snapshot
        run: pnpm changeset version --snapshot ${{ steps.tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish snapshot
        id: publish
        run: |
          pnpm exec changeset publish --tag ${{ steps.tag.outputs.tag }}

          # Get published version
          VERSION=$(node -p "require('./packages/effect-grpc/package.json').version" 2>/dev/null || echo "unknown")
          if [ "$VERSION" = "unknown" ]; then
            echo "Failed to extract version"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      - name: Output to console
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "‚úÖ Snapshot published!"
          echo "Version: ${{ steps.publish.outputs.version }}"
          echo "Tag: ${{ steps.tag.outputs.tag }}"
          echo "Install with: pnpm add @dr_nikson/effect-grpc@${{ steps.tag.outputs.tag }}"

      - name: Comment on PR
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.publish.outputs.version }}';
            const tag = '${{ steps.tag.outputs.tag }}';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## üöÄ Snapshot Published!

              **Version:** \`${version}\`
              **Tag:** \`${tag}\`
              
              ### Install:
              \`\`\`bash
              pnpm add @dr_nikson/effect-grpc@${tag}
              # or
              npm install @dr_nikson/effect-grpc@${tag}
              \`\`\`
              
              ### Using specific version:
              \`\`\`bash
              pnpm add @dr_nikson/effect-grpc@${version}
              \`\`\`
              
              This snapshot will be available until a newer version is published.`
            });

      - name: Handle failure
        if: failure() && github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚ùå Snapshot publish failed. Check the [workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`
            });
