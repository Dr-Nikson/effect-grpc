// packages/effect-grpc/src/client.ts
import { Context, Effect, Layer } from "effect";

import type { DescMessage, MessageInitShape, MessageShape } from "@bufbuild/protobuf";
import type { GenMessage, GenService, GenServiceMethods } from "@bufbuild/protobuf/codegenv2";
import { type ContextValues } from "@connectrpc/connect";

import * as internal from "./client.internal.js";

export type GrpcClientTypeId = typeof internal.grpcClientTypeId;

/**
 * Core interface for gRPC client operations in the Effect ecosystem.
 *
 * The GrpcClient provides underlying executor implementation for gRPC service methods,
 * allowing type-safe invocation of remote procedures through Effect. This entity is
 * used in Codegen and Configurations to generate type-safe client code.
 *
 * @example
 * ```typescript
 * // This code is usually generated by protoc-gen-effect
 * // See packages/effect-grpc/src-template/hello_world_api_effect.ts
 * const prog = Effect.gen(function* () {
 *   const grpcService = yield* EffectGrpcClient.GrpcClient;
 *   const executor = grpcService.makeExecutor(HelloWorldAPI, ["getGreeting"]);
 *
 *   return {
 *     getGreeting(req, meta) {
 *       return executor.getGreeting(req, transformMeta(meta));
 *     }
 *   };
 * });
 * ```
 *
 * @category Client
 * @since 0.2.0
 */
export interface GrpcClient {
  readonly Type: GrpcClientTypeId;

  makeExecutor<Shape extends GenServiceMethods>(
    serviceDefinition: GenService<Shape>,
    methodNames: ReadonlyArray<keyof GenService<Shape>["method"]>,
  ): Executor<Shape>;
}
/**
 * Context tag for accessing the GrpcClient service.
 *
 * Use this tag to access the GrpcClient implementation in your Effect programs.
 * The tag provides dependency injection for the gRPC client functionality.
 *
 * @example
 * ```typescript
 * import { Effect } from "effect";
 * import { GrpcClient, liveGrpcClientLayer } from "@dr_nikson/effect-grpc";
 *
 * const program = Effect.gen(function* () {
 *   const client = yield* GrpcClient;
 *   return client;
 * }).pipe(
 *   Effect.provide(liveGrpcClientLayer())
 * );
 * ```
 *
 * @category Client
 * @since 0.2.0
 */
export const GrpcClient = Context.GenericTag<GrpcClient, GrpcClient>(
  "@dr_nikson/effect-grpc/GrpcClient",
);

/**
 * Creates a live layer implementation for the GrpcClient service.
 *
 * This layer provides the default implementation of the GrpcClient interface,
 * enabling gRPC client functionality in your Effect applications.
 *
 * @example
 * ```typescript
 * import { Effect } from "effect";
 * import { GrpcClient, liveGrpcClientLayer } from "@dr_nikson/effect-grpc";
 *
 * const program = Effect.gen(function* () {
 *   const client = yield* GrpcClient;
 *   return client.makeExecutor(serviceDefinition, ["methodName"]);
 * }).pipe(
 *   Effect.provide(liveGrpcClientLayer())
 * );
 * ```
 *
 * @category Client
 * @since 0.2.0
 */
export const liveGrpcClientLayer: {
  (): Layer.Layer<GrpcClient>;
} = internal.liveGrpcClient;

/**
 * Metadata that can be attached to gRPC requests.
 *
 * This type defines the structure for additional information that can be sent
 * with gRPC calls, including Connect-RPC context values and HTTP headers.
 *
 * @example
 * ```typescript
 * import { RequestMeta } from "@dr_nikson/effect-grpc";
 *
 * const meta: RequestMeta = {
 *   headers: new Headers({ "Authorization": "Bearer token" }),
 *   contextValues: { timeout: 5000 }
 * };
 *
 * // Used in generated client code
 * const result = yield* executor.getGreeting(request, meta);
 * ```
 *
 * @category Client
 * @since 0.2.0
 */
export type RequestMeta = {
  contextValues?: ContextValues;
  headers?: Headers;
};

/**
 * Type-safe executor interface for gRPC service methods.
 *
 * Maps gRPC service method shapes to their corresponding executor functions,
 * providing type safety for method calls. Currently supports unary RPC calls.
 *
 * @example
 * ```typescript
 * import { EffectGrpcClient } from "@dr_nikson/effect-grpc";
 *
 * // This type is usually inferred from service definitions
 * declare const serviceDefinition: GenService<MyServiceMethods>;
 * declare const client: EffectGrpcClient.GrpcClient;
 *
 * const executor = client.makeExecutor(serviceDefinition, ["getGreeting"]);
 * // executor.getGreeting is now type-safe based on the service definition
 * ```
 *
 * @category Client
 * @since 0.2.0
 */
export type Executor<RuntimeShape extends GenServiceMethods> = {
  [P in keyof RuntimeShape]: RuntimeShape[P] extends (
    { methodKind: "unary"; input: GenMessage<infer In>; output: GenMessage<infer Out> }
  ) ?
    UnaryExecutorFn<GenMessage<In>, GenMessage<Out>>
  : "provided methodKind is not yet supported";
};

type UnaryExecutorFn<I extends DescMessage, O extends DescMessage> = (
  request: MessageInitShape<I>,
  meta?: RequestMeta,
) => Effect.Effect<MessageShape<O>>;
