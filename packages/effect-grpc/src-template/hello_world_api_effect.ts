// @generated by protoc-gen-effect-grpc v0.1.0 with parameter "target=ts,import_extension=js"
// @generated from file com/example/v1/hello_world_api.proto (package com.example.v1, syntax proto3)
/* eslint-disable */
import { Context, Effect, Layer } from "effect";
import type { MessageInitShape } from "@bufbuild/protobuf";
import { HandlerContext } from "@connectrpc/connect";

import { GetGreetingRequestSchema, GetGreetingResponseSchema, HelloWorldAPI } from "./hello_world_api_pb.js";
import type { GetGreetingRequest, GetGreetingResponse } from "./hello_world_api_pb.js";
import { EffectGrpcClient, EffectGrpcServer } from "../src";


export const HelloWorldAPIId = "com.example.v1.HelloWorldAPI" as const;
export type HelloWorldAPIId = typeof HelloWorldAPIId;

/**
 * * Temporary service for debugging purposes.
 *
 *
 * @generated from service com.example.v1.HelloWorldAPI
 */
export interface HelloWorldAPIService<Ctx> {
  /**
   * Returns the greeting
   *
   * @generated from rpc com.example.v1.HelloWorldAPI.GetGreeting
   */
  getGreeting(
    request: GetGreetingRequest,
    ctx: Ctx,
  ): Effect.Effect<MessageInitShape<typeof GetGreetingResponseSchema>>;
}
export const HelloWorldAPIService: {
  makeTag<Ctx>(ctxKey: string): HelloWorldAPITag<Ctx>;

  liveLayer<Ctx>(
    service: HelloWorldAPIService<Ctx>,
  ): <Tag extends HelloWorldAPITag<Ctx>>(
    tag: Tag,
  ) => Layer.Layer<Context.Tag.Identifier<Tag>, never, never>;
} = {
  makeTag: makeHelloWorldAPIServiceTag,
  liveLayer: makeHelloWorldAPILiveLayer,
};

export type HelloWorldAPIGrpcService<Ctx = HandlerContext> = EffectGrpcServer.GrpcService<
  HelloWorldAPIId,
  typeof HelloWorldAPI,
  Ctx
>;
export type HelloWorldAPITag<Ctx> = Context.Tag<
  HelloWorldAPIGrpcService<Ctx>,
  HelloWorldAPIGrpcService<Ctx>
>;
function makeHelloWorldAPIServiceTag<Ctx>(ctxKey: string): HelloWorldAPITag<Ctx> {
  return Context.GenericTag<HelloWorldAPIGrpcService<Ctx>>(
    `com.example.v1.HelloWorldAPI<${ctxKey}>`,
  );
}

function makeHelloWorldAPILiveLayer<Ctx>(service: HelloWorldAPIService<Ctx>) {
  return <Tag extends HelloWorldAPITag<Ctx>>(tag: Tag) => {
    const instance: HelloWorldAPIGrpcService<Ctx> = EffectGrpcServer.GrpcService(
      HelloWorldAPIId,
      HelloWorldAPI,
    )((executor) => ({
      getGreeting: (req, ctx) =>
        executor.unary(req, ctx, (req, ctx) => service.getGreeting(req, ctx)),
    }));

    return Layer.succeed(tag, instance);
  };
}

/**
 * * Temporary service for debugging purposes.
 *
 *
 * @generated from service com.example.v1.HelloWorldAPI
 */
export interface HelloWorldAPIClient<Meta> {
  /**
   * Returns the greeting
   *
   * @generated from rpc com.example.v1.HelloWorldAPI.GetGreeting
   */
  getGreeting(
    request: MessageInitShape<typeof GetGreetingRequestSchema>,
    meta: Meta,
  ): Effect.Effect<GetGreetingResponse>;
}
export const HelloWorldAPIClient: {
  makeTag<Meta>(metaKey: string): HelloWorldAPIClientTag<Meta>;

  liveLayer<Tag extends HelloWorldAPIClientTag<Meta>, Meta>(
    transformMeta: (meta: Meta) => EffectGrpcClient.RequestMeta,
    tag: Tag,
  ): Layer.Layer<
    Context.Tag.Identifier<Tag>,
    never,
    Context.Tag.Identifier<HelloWorldAPIConfigTag> | EffectGrpcClient.GrpcClientRuntime
  >;

  liveLayer<Tag extends HelloWorldAPIClientTag<object>>(
    tag: Tag,
  ): Layer.Layer<
    Context.Tag.Identifier<Tag>,
    never,
    Context.Tag.Identifier<HelloWorldAPIConfigTag> | EffectGrpcClient.GrpcClientRuntime
  >;
} = {
  makeTag: makeHelloWorldAPIClientTag,
  liveLayer: makeHelloWorldAPIClientLiveLayer,
};

export type HelloWorldAPIClientTag<Meta> = Context.Tag<
  HelloWorldAPIClient<Meta>,
  HelloWorldAPIClient<Meta>
>;

export type HelloWorldAPIConfigTag = Context.Tag<
  EffectGrpcClient.GrpcClientConfig<HelloWorldAPIId>,
  EffectGrpcClient.GrpcClientConfig<HelloWorldAPIId>
>;
export const HelloWorldAPIConfigTag: HelloWorldAPIConfigTag =
  EffectGrpcClient.GrpcClientConfig.makeTag(HelloWorldAPIId);

function makeHelloWorldAPIClientTag<Meta>(metaKey: string): HelloWorldAPIClientTag<Meta> {
  return Context.GenericTag<HelloWorldAPIClient<Meta>>(
    `com.example.v1.HelloWorldAPIClient<${metaKey}>`,
  );
}

function makeHelloWorldAPIClientLiveLayer<Tag extends HelloWorldAPIClientTag<Meta>, Meta = object>(
  ...args: readonly [(meta: Meta) => EffectGrpcClient.RequestMeta, Tag] | readonly [Tag]
) {
  const [transformMeta, tag] =
    isDefaultMetaArguments(args) ?
      ([() => ({}) as EffectGrpcClient.RequestMeta, args[0]] as const)
    : args;

  const prog = Effect.gen(function* () {
    const config = yield* HelloWorldAPIConfigTag;
    const grpcRuntime = yield* EffectGrpcClient.GrpcClientRuntime;
    const executor = yield* grpcRuntime.makeExecutor(HelloWorldAPI, ["getGreeting"], config);

    return {
      getGreeting(req, meta) {
        return executor.getGreeting(req, transformMeta(meta));
      },
    } as HelloWorldAPIClient<Meta>;
  });

  return Layer.effect(tag, prog);

  function isDefaultMetaArguments(args: unknown): args is readonly [Tag] {
    return Array.isArray(args) && args.length === 1;
  }
}
